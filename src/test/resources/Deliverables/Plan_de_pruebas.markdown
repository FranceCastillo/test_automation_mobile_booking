# AUTOMATIZACI√ìN DE PRUEBAS FUNCIONALES BOOKING.COM

### üìÑ Contexto:

Booking.com es un agregador de tarifas de viaje y un metabuscador de viajes para reservas de
alojamiento. Booking.com forma parte de Booking Holdings Inc., y cuenta con m√°s de 17.000 trabajadores
en 198 oficinas de 70 pa√≠ses de todo el mundo. Booking.com tiene su sede en √Åmsterdam, Pa√≠ses Bajos.

### üö© Problem√°tica:

Cada vez que se hacen cambios en la aplicaci√≥n m√≥vil de Booking.com se deben efectuar todo un conjunto
de pruebas manuales de los casos de prueba ya dise√±ados en sus Test Suite, con el objetivo de verificar
que ninguna funcionalidad disponible para los usuarios haya sido alterada o impactada por los nuevos
cambios implementados y desplegados en producci√≥n.

### üí° Propuesta:

Para mejorar la rapidez y asegurar que la aplicaci√≥n m√≥vil funcione correctamente 
tras hacerle modificaciones, se propone implementar conjuntos de pruebas automatizadas
enfocadas en la interfaz y las funcionalidades que esta ofrece. 
Esto permite realizar pruebas de manera frecuente y r√°pida, facilitando la detecci√≥n de la mayor√≠a de los errores 
durante la etapa de desarrollo.

***

# ‚úÖ PLAN DE PRUEBAS FUNCIONAL

### RESUMEN

> **FEATURE TEST PLAN**: Booking | Accommodation Service | Flujo E2E para la creaci√≥n de una reserva de alojamiento en
> la app de booking.com
>
>*Como usuario de booking,  
Quiero realizar una reserva de alojamiento en el aplicativo  
Para agendar un lugar donde hospedarme en mi pr√≥ximo viaje*

* Este Plan se llevar√° a cabo a nivel de **Pruebas funcionales y Pruebas de Regresi√≥n**.
* Este Plan se llevar√° a cabo con **Appium** para la automatizacion, **cucumber** como herramienta de desarrollo BDD y **Java** como lenguaje de programaci√≥n
* Este Plan se realizar√° para determinar **qu√© pruebas se har√°n** y **c√≥mo se realizar√°n las pruebas.**

### OBJETIVO

Validar las funcionalidades b√°sicas que puede realizar un usuario al realizar la creaci√≥n de una reserva de alojamiento,
usando Appium para automatizar el proceso y el lenguaje Gherkin para la escritura de los escenarios de prueba.

### SUPUESTOS

* La app se encuentra siempre en funcionamiento.
* Acceso a la apk de la aplicaci√≥n.
* Herramientas de pruebas como AndroidStudio, Appium Server y Appium Desktop correctamente instalados y configurados.
* Conocimientos en Mobile Testing.

### COBERTURA

* Posibilidad de acceder y probar la funci√≥n de reserva en un servicio de hospedaje.
* Aunque se enfocar√° en esto, se permiten pruebas extra si ofrecen beneficios para comprobar otras capacidades.
* Adherirse a las directrices empresariales relacionadas con las reservas de alojamiento en la aplicaci√≥n.
* Incluir al menos una trayectoria de √©xito (HAPPY PATH) y una de fallo (UNHAPPY PATH).
* Los escenarios fuera de los flujos establecidos para prueba no ser√°n objeto de validaci√≥n.

### RIESGOS

| Riesgo                                                    | Mitigaci√≥n                                                                                                             |
|:----------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------|
| No tener acceso a la apk del aplicativo                   | Solicitar al dev el env√≠o de la apk.                                                                                   |
| No se tiene un dispositivo mobile real para pruebas       | Utilizar un emulador para la conexi√≥n.                                                                                 |
| No se puede realizar la conexi√≥n con el dispositivo       | Utilizar una plataforma de testeo m√≥vil como (BrowserStack, Lambda Test, etc                                           |
| No se puede inspeccionar el dispositivo por 'secure' flag | Imprimir el C√≥digo Fuente de la pantalla con el comando **driver.getPageSource()** y realice la inspecci√≥n con este c√≥digo |

***

### RECURSOS

* **Android Studio**: como herramienta de apoyo para emular un dispositivo mobile.
* **Appium Server**: como herramienta para crear una sesi√≥n que permita interactuar con los dispositivos finales de las aplicaciones m√≥viles.
* **Uiautomatorviewer** : para la inspecci√≥n y localizaci√≥n de elementos
* **Plan de pruebas**: Documento para la planificaci√≥n de las pruebas.
* **APK**: Link de descarga del apk de [Booking.com](https://drive.google.com/file/d/1ruY_5qcqWlsE3-W3rgXpFyyMiO59wFUc/view?usp=sharing)

### CONFIGURACI√ìN DEL AMBIENTE

* Las pruebas ser√°n ejecutadas en un dispositivo **Android**.
* El dispositivo m√≥vil ser√° emulado desde **Android Studio**


### CONSIDERACIONES DE LAS PRUEBAS

- [ ] Para el destino buscar la Ciudad de CUSCO. 
- [ ] Para las fechas de estad√≠a seleccionar desde el 14/02 al 28/02 del 2024. 
- [ ] Seleccionar 1 habitaci√≥n, 2 adultos y 1 ni√±o de 5 a√±os.
- [ ] Seleccionar el item 2 de los resultados de la b√∫squeda, elegir la habitaci√≥n y reservar la primera opci√≥n.
- [ ] Elegir forma de pago tarjeta de cr√©dito.
- [ ] Validar en todos los pasos posibles el costo de la reserva.
- [ ] Automatizar las funcionalidades del flujo completo de la reserva.
- [ ] Considerar la creaci√≥n de escenarios Happy Paths y UnHappy Paths.
- [ ] Considerar en la automatizaci√≥n todas las aserciones posibles.

### FLUJOS A PROBAR (dentro de alcance)

Test dise√±ados para validar los escenarios **Happy Paths** üòÉ
***
> **‚ú® FEATURE**: Accommodation Reserve | Creaci√≥n de un servicio completo de alojamiento
> - [x] Validate entry data for the accommodation search
>
> - [x] Validate selection of accommodation results
>
> - [x] Validate the customer information form
>
> - [x] Validate the payment method and finalize the reservation
***
Test dise√±ados para validar los escenarios **UNHappy Paths** ü§°

> **‚ú® FEATURE**: UnHappy Paths | Accommodation without selecting destination
> - [x] Validate that it is not possible to make a reservation without entering a destination
***

### CRITERIOS DE SALIDA
> ‚úÖ Las pruebas han terminado y no hay defectos funcionales  
> ‚úÖ Todos los defectos restantes tienen una severidad baja

### ENTEGRABLES DE PRUEBAS

> ‚òëÔ∏è El plan de pruebas actual, la ruta de su ubicaci√≥n es: `resources/Deliverables/plan_de_pruebas.markdown`  
> ‚òëÔ∏è El informe del resultado de pruebas, la ruta de su ubicaci√≥n es: `target/`   
> ‚òëÔ∏è El repositorio en GitHub: [test_automation_mobile_booking](https://github.com/FranceCastillo/test_automation_mobile_booking)
***

### ‚ùó INFORMACI√ìN ADICIONAL

> *Considerar que si las pruebas se ejecutan luego del 14/02/2024 se debe cambiar las fechas de check-in y check-out ya que, no se pueden realizar la busqueda con fechas del pasado*
> > *Toda la informaci√≥n relacionada a la estructura del proyecto e instalacion se especifica en el archivo README.md*
***